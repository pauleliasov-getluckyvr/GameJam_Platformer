# C# Development Rules

## Naming Conventions
- Use PascalCase for class names, methods, and properties
- Use camelCase for variables and parameters
- Use _camelCase for private fields
- Use UPPER_CASE for constants
- Prefix interfaces with 'I' (e.g., IRepository)
- Use meaningful and descriptive names

## Class Structure
- One class per file
- Keep classes focused and single-responsibility
- Maximum file length: 500 lines
- Maximum method length: 20 lines
- Maximum parameter count: 4
- Use partial classes for large classes that need to be split

## SOLID Principles
- Single Responsibility: Each class should have only one reason to change
- Open/Closed: Classes should be open for extension but closed for modification
- Liskov Substitution: Derived classes should be substitutable for their base classes
- Interface Segregation: Clients should not be forced to depend on interfaces they don't use
- Dependency Inversion: High-level modules should not depend on low-level modules

## Code Organization
- Group related fields together
- Order members: private fields, properties, constructors, public methods, private methods
- Use regions sparingly and only for large classes
- Keep using statements at the top
- Remove unused using statements

## Error Handling
- Use specific exceptions rather than general ones
- Always include meaningful error messages
- Use try-catch blocks only when necessary
- Log exceptions appropriately
- Use null-conditional operators (?.) and null-coalescing operators (??)

## Performance
- Use StringBuilder for string concatenation in loops
- Implement IDisposable for classes managing unmanaged resources
- Use async/await for I/O operations
- Avoid boxing/unboxing in performance-critical code
- Use structs for small, immutable data types

## Testing
- Write unit tests for public methods
- Follow AAA pattern (Arrange, Act, Assert)
- Use meaningful test names that describe the scenario
- Keep tests independent and isolated
- Use appropriate test attributes ([Fact], [Theory], [InlineData])

## Documentation
- Document public APIs with XML comments
- Keep comments focused on "why" not "what"
- Update documentation when changing code
- Use meaningful commit messages
- Document complex algorithms or business logic

## Code Style
- Use expression-bodied members when appropriate
- Prefer readonly over const for class-level constants
- Use pattern matching where applicable
- Use null-conditional operators
- Use string interpolation over string.Format

## Security
- Never store sensitive data in code
- Use secure string for password handling
- Validate all input data
- Use parameterized queries for database operations
- Implement proper authentication and authorization

## Version Control
- Keep commits atomic and focused
- Write meaningful commit messages
- Use feature branches for new development
- Review code before merging
- Keep .gitignore up to date 